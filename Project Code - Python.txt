---

Project Structure

We'll organize the code into classes for better maintainability:

- RSAKeyPairGenerator: Generates RSA key pairs.
- RSAEncryptor: Handles encryption.
- RSADecryptor: Handles decryption.
- main.py: Demonstrates the usage of the above classes.

---

Prerequisites

- Python 3.6 or higher: Ensure you have Python installed.
- Cryptography Library: Install the cryptography library using pip:

  
  pip install cryptography
  

---

Implementation

1. rsa_key_pair_generator.py


from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa

class RSAKeyPairGenerator:
    def __init__(self, key_length):
        self.key_length = key_length

    def create_keys(self):
        self.private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=self.key_length,
            backend=default_backend()
        )
        self.public_key = self.private_key.public_key()

    def get_private_key(self):
        return self.private_key

    def get_public_key(self):
        return self.public_key


Explanation:

- Utilizes Python's cryptography library to generate RSA key pairs.
- The default_backend ensures cryptographically secure random number generation.
- The public exponent 65537 is a commonly used prime in RSA cryptography.

---

2. rsa_encryptor.py


from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes

class RSAEncryptor:
    def encrypt(self, data, public_key):
        encrypted = public_key.encrypt(
            data,
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )
        )
        return encrypted


Explanation:

- Uses OAEP padding with SHA-256 for enhanced security.
- The encrypt method accepts data and a public key, returning encrypted bytes.

---

3. rsa_decryptor.py


from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes

class RSADecryptor:
    def decrypt(self, encrypted_data, private_key):
        decrypted = private_key.decrypt(
            encrypted_data,
            padding.OAEP(
                mgf=padding.MGF1(algorithm=hashes.SHA256()),
                algorithm=hashes.SHA256(),
                label=None
            )
        )
        return decrypted


Explanation:

- Mirrors the RSAEncryptor but uses the private key for decryption.
- The decrypt method accepts encrypted data and a private key, returning decrypted bytes.

---

4. main.py


import base64

from rsa_key_pair_generator import RSAKeyPairGenerator
from rsa_encryptor import RSAEncryptor
from rsa_decryptor import RSADecryptor

from cryptography.hazmat.primitives import serialization

def main():
    try:
        # Key sizes to test
        key_sizes = [1024, 2048]

        for key_size in key_sizes:
            print(f"Testing RSA with key size: {key_size}\n")

            # Generate RSA Key Pair
            key_pair_generator = RSAKeyPairGenerator(key_size)
            key_pair_generator.create_keys()
            public_key = key_pair_generator.get_public_key()
            private_key = key_pair_generator.get_private_key()

            # Display keys in PEM format
            pem_public_key = public_key.public_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PublicFormat.SubjectPublicKeyInfo
            )
            pem_private_key = private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            )
            print(f"Public Key:\n{pem_public_key.decode('utf-8')}\n")
            print(f"Private Key:\n{pem_private_key.decode('utf-8')}\n")

            # Message to encrypt
            message = "This is a secret message for RSA encryption"

            # Encrypt the message
            encryptor = RSAEncryptor()
            encrypted_data = encryptor.encrypt(message.encode('utf-8'), public_key)
            print(f"Encrypted Data: {base64.b64encode(encrypted_data).decode('utf-8')}\n")

            # Decrypt the message
            decryptor = RSADecryptor()
            decrypted_data = decryptor.decrypt(encrypted_data, private_key)
            decrypted_message = decrypted_data.decode('utf-8')
            print(f"Decrypted Message: {decrypted_message}\n")

            print("----------------------------------------------------\n")
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()


Explanation:

- Iterates over specified key sizes (1024 and 2048 bits).
- Generates key pairs for each size.
- Displays the public and private keys in PEM format.
- Encrypts and decrypts a sample message.
- Outputs the results in a readable format.

---

Security Considerations

- Padding Scheme: Uses OAEP with SHA-256, which is more secure than the older PKCS#1 v1.5 padding.
- Secure Randomness: The cryptography library ensures that keys are generated with high entropy.
- Key Sizes: Uses 2048-bit keys for stronger security; 1024-bit keys are included for comparison but are not recommended for sensitive data.

---

Execution Instructions

1. Save the Files: Create a directory and save the following Python files:

   - rsa_key_pair_generator.py
   - rsa_encryptor.py
   - rsa_decryptor.py
   - main.py

2. Install Dependencies: Ensure you have the cryptography library installed:

   
   pip install cryptography
   

3. Run the Program: Open a command prompt or terminal in the directory containing the files and run:

   
   python main.py
   

---

Sample Output


Testing RSA with key size: 1024

Public Key:
-----BEGIN PUBLIC KEY-----
MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALqLVY0m7sN3PAnH...
-----END PUBLIC KEY-----

Private Key:
-----BEGIN PRIVATE KEY-----
MIIBVwIBADANBgkqhkiG9w0BAQEFAASCAU8wggFLAgEAAkEA...
-----END PRIVATE KEY-----

Encrypted Data: qj1B... (Base64 Encoded Cipher Text)

Decrypted Message: This is a secret message for RSA encryption

----------------------------------------------------

Testing RSA with key size: 2048

Public Key:
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArV2Y...
-----END PUBLIC KEY-----

Private Key:
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIB...
-----END PRIVATE KEY-----

Encrypted Data: B8F0... (Base64 Encoded Cipher Text)

Decrypted Message: This is a secret message for RSA encryption

----------------------------------------------------


---

Enhancements

1. Key Storage

Modify RSAKeyPairGenerator to save keys to files:


from cryptography.hazmat.primitives import serialization

class RSAKeyPairGenerator:
    # ... existing methods ...

    def write_key_to_file(self, key, filename):
        if isinstance(key, rsa.RSAPublicKey):
            pem = key.public_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PublicFormat.SubjectPublicKeyInfo
            )
        else:
            pem = key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            )
        with open(filename, 'wb') as f:
            f.write(pem)


Usage:


key_pair_generator.write_key_to_file(public_key, 'public_key.pem')
key_pair_generator.write_key_to_file(private_key, 'private_key.pem')


2. Handling Large Messages

RSA is not suitable for encrypting large data directly. Implement hybrid encryption using AES:

- Generate an AES key.
- Encrypt the message with AES.
- Encrypt the AES key with RSA.
- Send both the encrypted AES key and the encrypted message.

---

Best Practices

- Avoid Hardcoding Sensitive Data: Do not hardcode keys or sensitive information in the code.
- Use Context Managers: For resource management (e.g., using with statements when handling files).
- Input Validation: Always validate inputs when accepting data from users to prevent security vulnerabilities.
- Exception Handling: Handle exceptions gracefully and log errors appropriately.
- Update Key Sizes: For better security, consider using 3072 or 4096-bit keys.

---

Dependencies

- cryptography library: Provides cryptographic recipes and primitives.

---

Code Review Checklist

- ✅ Security: Uses secure random number generation and padding schemes.
- ✅ Readability: Code is well-organized with clear class responsibilities.
- ✅ Maintainability: Easy to extend (e.g., adding support for different padding schemes).
- ✅ Performance: Efficient use of resources.
- ✅ Documentation: Comments and explanations provided.

---

Conclusion

This Python implementation provides a robust foundation for RSA encryption and decryption using 1024 and 2048-bit key sizes. It adheres to industry best practices, ensuring security and maintainability. The use of the cryptography library guarantees that cryptographic operations are performed securely and efficiently, aligning with current standards.

---